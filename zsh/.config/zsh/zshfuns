# Universal clipboard copy
# clipcopy - Copy data to clipboard
#
# Usage:
#
#  <command> | clipcopy    - copies stdin to clipboard
#
#  clipcopy <file>         - copies a file's contents to clipboard
#
#  Credit: https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/clipboard.zsh
function clipcopy() {
  emulate -L zsh
  local file=$1
  if [[ $OSTYPE == darwin* ]]; then
    if [[ -z $file ]]; then
      pbcopy
    else
      cat $file | pbcopy
    fi
  elif [[ $OSTYPE == cygwin* ]]; then
    if [[ -z $file ]]; then
      cat > /dev/clipboard
    else
      cat $file > /dev/clipboard
    fi
  else
    if (( $+commands[xclip] )); then
      if [[ -z $file ]]; then
        xclip -in -selection clipboard
      else
        xclip -in -selection clipboard $file
      fi
    elif (( $+commands[xsel] )); then
      if [[ -z $file ]]; then
        xsel --clipboard --input 
      else
        cat "$file" | xsel --clipboard --input
      fi
    else
      print "clipcopy: Platform $OSTYPE not supported or xclip/xsel not installed" >&2
      return 1
    fi
  fi
}

# Git Log Interactive
# https://gist.github.com/junegunn/f4fca918e937e6bf5bad
gli() {
  local out shas sha q k
  while out=$(
      git l --format=$GIT_LOG_STYLE $1 |
      fzf --ansi --no-sort --reverse --multi --query="$q" \
          --print-query --expect=ctrl-d,ctrl-c --toggle-sort=\`); do
    q=$(head -1 <<< "$out")
    k=$(head -2 <<< "$out" | tail -1)
    shas=$(sed '1,2d;s/^[^a-z0-9]*//;/^$/d' <<< "$out" | awk '{print $1}')
    [ -z "$shas" ] && continue
    if [ "$k" = ctrl-d ]; then
      nvim fugitive://$(git rev-parse --show-toplevel)/.git//$(git rev-parse $shas)
    elif [ "$k" = ctrl-c ]; then
      echo $shas | tr -d '\n' | clipcopy
      break
    else
      for sha in $shas; do
        git show --color=always $sha | less -R
      done
    fi
  done
}

# Marks
function jump {
  cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark {
  mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark {
  rm -i "$MARKPATH/$1"
}
function marks {
  \ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
}
function _completemarks {
  reply=($(ls $MARKPATH))
}
function selectmark {
  URI="$(marks | cat | f | awk '{print $1}')"
  cd -P "$MARKPATH/$URI" 2>/dev/null || echo "No such mark: $URI"
}
compctl -K _completemarks jump
compctl -K _completemarks unmark
