" Plug =======================================================================
  set nocompatible
  filetype off

  call plug#begin('~/.dotfiles/vendor/plugged')

  Plug 'chriskempson/base16-vim'
  Plug 'scrooloose/syntastic'
  Plug 'airblade/vim-gitgutter'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'MarcWeber/vim-addon-local-vimrc'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'kien/ctrlp.vim'
  Plug 'FelikZ/ctrlp-py-matcher'
  Plug 'tpope/vim-unimpaired'
  Plug 'jpalardy/vim-slime'
  " Plug 'edkolev/tmuxline.vim'
  Plug 'SirVer/ultisnips'
  Plug 'jszakmeister/vim-togglecursor'
  Plug 'xolox/vim-misc'
  Plug 'ervandew/supertab'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-speeddating'
  Plug 'tpope/vim-abolish'
  Plug 'tpope/vim-repeat'
  Plug 'Raimondi/delimitMate'
  Plug 'junegunn/vim-easy-align'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-dispatch'
  Plug 'justinmk/vim-gtfo'
  Plug 'itchyny/lightline.vim'
  Plug 'tpope/vim-commentary',    { 'on': ['<Plug>Commentary', '<Plug>CommentaryLine'] }
  Plug 'Valloric/YouCompleteMe',  { 'do': './install.sh' }
  Plug 'Lokaltog/vim-easymotion', { 'on': '<Plug>(easymotion-bd-t2)'}
  Plug 'tpope/vim-rhubarb',       { 'on': 'Gcommit' }
  Plug 'xolox/vim-notes',         { 'on': ['Note', 'RecentNotes']}
  Plug 'rizzatti/dash.vim',       { 'on': '<Plug>DashSearch' }
  Plug 'chrisbra/NrrwRgn',        { 'on': ['NarrowRegion', 'NarrowWindow']}
  Plug 'tacahiroy/ctrlp-funky',   { 'on': ['CtrlPFunky'] }
  Plug 'majutsushi/tagbar',       { 'on':  'TagbarToggle' }
  Plug 'scrooloose/nerdtree',     { 'on':  'NERDTreeToggle' }
  Plug 'sjl/gundo.vim',           { 'on': 'GundoToggle' }
  Plug 'gregsexton/gitv',         { 'on': 'Gitv' }

" conditional===================================================================
  au BufRead,BufNewFile {*.md,*.markdown} set filetype=markdown
  au BufNewFile,BufRead {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru,compass.config} set ft=ruby
  au BufNewFile,BufRead {*.json,*jshintrc,*tern-project,*jscsrc} set ft=json
  au BufNewFile,BufRead {*.es6} set ft=javascript
  au BufNewFile,BufRead {*gitconfig} set ft=gitconfig
  au BufNewFile,BufRead {*.hbs,*.handlebars} set ft=mustache
  au BufNewFile,BufRead {*Dockerfile} set filetype=dockerfile
  au BufNewFile,BufRead {*.coffee,*.litcoffee} set filetype=coffee

  Plug 'elzr/vim-json',                          { 'for': 'json' }
  Plug 'honza/dockerfile.vim',                   { 'for': 'dockerfile' }
  Plug 'vim-ruby/vim-ruby',                      { 'for': 'ruby' }
  Plug 'tpope/vim-rails',                        { 'for': 'ruby' }
  Plug 'tpope/vim-bundler',                      { 'for': 'ruby' }
  Plug 'tpope/vim-projectionist',                { 'for': 'ruby' }
  Plug 'tpope/vim-endwise',                      { 'for': ['ruby', 'sh'] }
  Plug 'kchmck/vim-coffee-script',               { 'for': 'coffee' }
  Plug 'othree/javascript-libraries-syntax.vim', { 'for': 'coffee' }
  Plug 'moll/vim-node',                          { 'for': 'javascript' }
  Plug 'othree/javascript-libraries-syntax.vim', { 'for': 'javascript' }
  Plug 'heavenshell/vim-jsdoc',                  { 'for': 'javascript' }
  Plug 'marijnh/tern_for_vim',                   { 'for': 'javascript', 'do': 'npm install' }
  Plug 'othree/yajs.vim',                        { 'for': 'javascript' }
  Plug 'csscomb/vim-csscomb',                    { 'for': ['css', 'scss'] }
  Plug 'itspriddle/vim-marked',                  { 'for': ['markdown', 'ghmarkdown'] }
  Plug 'gabrielelana/vim-markdown',              { 'for': ['markdown', 'ghmarkdown'] }
  Plug 'mattn/emmet-vim',                        { 'for': ['html', 'eruby', 'javascript', 'css', 'scss', 'markdown', 'ghmarkdown'] }

  call plug#end()
  filetype plugin indent on

" settings =====================================================================
  let mapleader = ","

  set encoding=utf-8
  set laststatus=2
  set mouse=a
  set ttymouse=xterm2
  set ffs=unix,dos,mac
  set clipboard=unnamed
  set autoread
  set hidden
  set ruler
  set number
  set title
  set backspace=indent,eol,start
  set nostartofline
  set nowrap
  set colorcolumn=80
  set nofoldenable
  set tabstop=2
  set shiftwidth=2
  set softtabstop=2
  set expandtab
  set autoindent
  set copyindent
  set pastetoggle=<F2>
  set list
  set listchars=trail:·,tab:⇥ᐧ
  " set listchars=trail:␣,tab:⇥ᐧ,nbsp:⍽,eol:¶,extends:▸,precedes:◂
  set wmh=0
  set background=dark
  set hlsearch
  set incsearch
  set ignorecase
  set smartcase
  set wildignore+=.git\*,.hg\*,.svn\*
  set nobackup
  set nowb
  set noswapfile

  filetype plugin on
  filetype indent on
  syntax enable
  let base16colorspace=256
  colorscheme base16-tomorrow

  au FileType make set noexpandtab
  au FileType gitconfig set noexpandtab

" plugin functions =============================================================
  " nerdtree
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

  " syntastic
  function s:find_jshintrc(dir)
    let l:found = globpath(a:dir, '.jshintrc')
    if filereadable(l:found)
        return l:found
    endif
    let l:parent = fnamemodify(a:dir, ':h')
    if l:parent != a:dir
        return s:find_jshintrc(l:parent)
    endif
    return "~/.dotfiles/vim/jshintrc"
  endfunction
  function UpdateJsHintConf()
    let l:dir = expand('%:p:h')
    let l:jshintrc = s:find_jshintrc(l:dir)
    let g:syntastic_javascript_jshint_conf = l:jshintrc
    let g:syntastic_javascript_jshint_args = '--config ' + l:jshintrc
  endfunction

" plugin mappings ==============================================================
  nmap        <Space>        <Plug>(easymotion-bd-t2)
  nmap        <leader>d      <Plug>DashSearch
  nmap        <Leader>/      <Plug>CommentaryLine
  vmap        <Leader>/      <Plug>Commentary
  vmap        <Enter>        <Plug>(LiveEasyAlign)
  nmap        ˚              [e
  nmap        ∆              ]e
  vmap        ˚              [egv
  vmap        ∆              ]egv
  nnoremap    Q              <nop>
  nnoremap    <leader>q      :bp\|bd #<CR>
  nnoremap    <Leader>l      :w<CR>:SyntasticCheck<CR>:Errors<CR>
  nnoremap    <Leader>md     :MarkedOpen!<CR>
  nnoremap    <Leader>gs     :Gstatus<CR>
  nnoremap    <Leader>ga     :Gcommit --amend<CR>
  nnoremap    <Leader>gc     :Gcommit -v -q<CR>
  nnoremap    <Leader>gt     :Gcommit -v -q %:p<CR>
  nnoremap    <Leader>gd     :Gdiff<CR>
  nnoremap    <Leader>gr     :Gread<CR>
  nnoremap    <Leader>ge     :Gedit<CR>
  nnoremap    <Leader>gw     :Gwrite<CR><CR>
  nnoremap    <Leader>gl     :Gitv<CR>
  nnoremap    <Leader>gh     :Gitv!<CR>
  nnoremap    <Leader>gm     :Gmove<Space>
  nnoremap    <Leader>gb     :Git branch<Space>
  nnoremap    <Leader>gco    :Git checkout<Space>
  nnoremap    <Leader>gp     :Dispatch! git push<CR>
  nnoremap    <Leader>gfm    :Dispatch! git pull<CR>
  nnoremap    <leader>p      :CtrlP<CR>
  nnoremap    <leader>b      :CtrlPBuffer<CR>
  nnoremap    <leader>o      :CtrlPFunky<CR>
  nnoremap    <leader>n      :RecentNotes<CR>
  nnoremap    -              :TagbarToggle<CR>
  nnoremap    +              :NERDTreeToggle<CR>
  nnoremap    _              :GundoToggle<CR>
  nnoremap    <Leader>rt     :%s/\s\+$//e<CR>
  nnoremap    <Leader>h      :nohlsearch<CR>

" plugin settings ==============================================================
  let g:EasyMotion_smartcase                          = 1
  let g:syntastic_html_checkers                       = ['']
  let g:syntastic_javascript_checkers                 = ['jshint', 'jscs']
  let g:syntastic_id_checkers                         = 1
  let g:syntastic_aggregate_errors                    = 1
  let g:syntastic_error_symbol                        = '✕'
  let g:syntastic_warning_symbol                      = '▵'
  let g:syntastic_style_error_symbol                  = '✕'
  let g:syntastic_style_warning_symbol                = '▵'
  let g:airline_powerline_fonts                       = 1
  let g:airline#extensions#tabline#enabled            = 1
  let g:airline#extensions#tabline#show_buffers       = 1
  let g:airline#extensions#tabline#buffer_nr_show     = 0
  let g:airline#extensions#tmuxline#enabled           = 0
  let g:local_vimrc                                   = {'names':['.local-vimrc'],'hash_fun':'LVRHashOfFile'}
  let g:delimitMate_expand_cr                         = 1
  let g:vim_json_syntax_conceal                       = 0
  let g:tern_show_argument_hints                      = 'no'
  let g:tern_show_signature_in_pum                    = 1
  let g:ycm_autoclose_preview_window_after_completion = 1
  let g:ycm_global_ycm_extra_conf                     = '~/.vim/.ycm_extra_conf.py'
  let g:ycm_enable_diagnostic_signs                   = 0
  let g:jsdoc_default_mapping                         = 0
  let g:jsdoc_allow_input_prompt                      = 1
  let g:slime_target                                  = "tmux"
  let g:slime_paste_file                              = tempname()
  let g:slime_default_config                          = {"socket_name": "default", "target_pane": "1"}
  let g:ycm_key_list_select_completion                = ['<c-n>', '<down>']
  let g:ycm_key_list_previous_completion              = ['<C-p>', '<Up>']
  let g:SuperTabDefaultCompletionType                 = '<C-n>'
  let g:UltiSnipsExpandTrigger                        = "<tab>"
  let g:UltiSnipsJumpForwardTrigger                   = "<tab>"
  let g:UltiSnipsJumpBackwardTrigger                  = "<s-tab>"
  let g:ctrlp_match_func                              = { 'match': 'pymatcher#PyMatch' }
  let g:ctrlp_clear_cache_on_exit                     = 0
  let g:ctrlp_max_files                               = 0
  let g:ctrlp_user_command                            = 'ag %s -i --nocolor --nogroup --hidden -g ""'
  let g:ctrlp_extensions                              = ['funky']
  let g:tagbar_left                                   = 0
  let g:tagbar_sort                                   = 0
  let NERDTreeShowHidden                              = 1
  let NERDTreeIgnore                                  = ['\.DS_Store', '\.git', '\.vagrant', 'node_modules']
  let g:rubycomplete_buffer_loading                   = 1
  let g:rubycomplete_classes_in_global                = 1
  let g:rubycomplete_rails                            = 1
  let g:rubycomplete_use_bundler                      = 1
  let g:airline#extensions#eclim#enabled              = 1
  let g:EclimCompletionMethod                         = 'omnifunc'
  let g:EclimJavascriptLintConf                       = '~/.dotfiles/vim/jslrc'
  let g:EclimJavascriptValidate                       = 0
  let g:notes_directories                             = ['~/Dropbox/Notes']
  let g:notes_tagsindex                               = '~/.dotfiles/vim/note_tags'
  let g:notes_smart_quotes                            = 1
  let g:gundo_right                                   = 1
  let g:netrw_liststyle                               = 3
  let g:tmuxline_powerline_separators                 = 1

  highlight SyntasticErrorSign ctermfg=1 ctermbg=18 guifg=#cc6666 guibg=#282a2e
