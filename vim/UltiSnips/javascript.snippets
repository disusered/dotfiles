snippet use "Use Strict"
'use strict';
endsnippet

snippet jdh "Javadoc header"
/**
 * `!p snip.rv = fn`
 *
 * @author ${1:Carlos Antonio}
 * @overview ${2:My cool project}
 * @copyright © `date +"%Y"` ${3:Carlos Antonio}
 * @license ${4:GPLv2}
 */
endsnippet

snippet if "A simple if condition"
if (${1:expression}) {
	$0
}
endsnippet

snippet ife "A simple if else condition"
if (${1:expression}) {
	$4
} else ${2:if (${3:bar}) }{
	$0
}
endsnippet

snippet sw "Switch condition"
switch (${1:expression}) {
	case ${2:alpha}:
		${5:console.log($2);}
		break;
	case ${3:beta}:
		${6:console.log($3);}
		break;${4:
	default:
		${7:console.log('default');}}
}
endsnippet

snippet => "Fat arrow" i
(${1}) => {$0}
endsnippet


snippet fd "Function declaration"
function ${1:name}(${2}) {
	$0
}
endsnippet

snippet _f "Inline Function declaration" i
function(${2}) {
	$0
}
endsnippet

snippet iife "Immediately Invoked Function Expression"
(function($1) {
  $0
})($2);
endsnippet

snippet fe "Function expression"
var ${1:name} = function ${1:name}(${2}){
	$0
}
endsnippet

snippet cl "Log to default console"
console.log(${0});
endsnippet

snippet cd "Log to debug console"
console.debug(${0});
endsnippet

snippet cw "Log to warning  console"
console.warn(${0});
endsnippet

snippet ce "Log to error console"
console.error(${0});
endsnippet

snippet us "Use strict definition"
'use strict';
endsnippet

snippet flow "Flow type checking"
/* @flow */
endsnippet

snippet rpta "PropTypes.Array" i
PropTypes.array
endsnippet

snippet rptb "PropTypes.Boolean" i
PropTypes.bool
endsnippet

snippet rptf "PropTypes.Function" i
PropTypes.func
endsnippet

snippet rptn "PropTypes.number" i
PropTypes.number
endsnippet

snippet rptno "PropTypes.node" i
PropTypes.node
endsnippet

snippet rpto "PropTypes.object" i
PropTypes.object
endsnippet

snippet rpts "PropTypes.string" i
PropTypes.string
endsnippet

snippet rpte "PropTypes.element" i
PropTypes.element
endsnippet

snippet rpton "PropTypes.oneOf"
PropTypes.oneOf([$0])
endsnippet

snippet rptao "PropTypes.arrayOf"
PropTypes.arrayOf($0)
endsnippet

snippet rptoo "PropTypes.objectOf"
PropTypes.objectOf($0)
endsnippet

snippet rptsh "PropTypes.shape" i
PropTypes.shape({
	${1:key}: $0
})
endsnippet

snippet react_component_stateless "React Component (Stateless)"
const ${1:`!p snip.rv = snip.basename`} = ({ ${2:children}${3: = ${4:'Hello World!'}} }) =>
  ${8:<div>{${0:`!p snip.rv = t[2]`}}</div>}${5:

`!p snip.rv = t[1]`.propTypes = { `!p snip.rv = t[2]`: ${7:PropTypes.string} };}
endsnippet

snippet react_component_es5 "React Component (ES5)" i
var React = require('react');

var ${1:`!p snip.rv = snip.basename`} = React.createClass({
  render: function() {
    return (
      <div>`!p snip.rv = t[1]`</div>
    );
  }
});

module.exports = `!p snip.rv = t[1]`;
endsnippet

snippet react_component_es6 "React Component (ES6)" i
import React, { Component } from 'react';

export default class ${1:`!p snip.rv = snip.basename`} extends Component {
  render() {
    return (
      <div>`!p snip.rv = t[1]`</div>
    );
  }
}
endsnippet

snippet tp "this.props"
this.props.$0
endsnippet

snippet tpc "this.props.children"
{this.props.children}$0
endsnippet

snippet ts "this.state"
this.state.$0
endsnippet

snippet ir ".isRequired" i
.isRequired
endsnippet

snippet regex "New RegEx"
var ${1:re} = new RegExp($0, '${2:i}');
endsnippet

snippet re "Return"
return ${1:variable};
endsnippet

snippet ro "Return object"
return {
	${1:key}: ${2:value}
};
endsnippet

snippet @ "this" i
this
endsnippet

snippet r "require()"
require('$0');
endsnippet

snippet i "import"
import $1 from '$0';
endsnippet

snippet v "var"
var ${1:name} = $0
endsnippet

snippet c "const"
const ${1:name} = $0
endsnippet

snippet cp "const with destructuring"
const { ${1:name} } = $0
endsnippet

snippet u "undefined"
undefined$0
endsnippet

snippet it "it should..."
it('${1:should...}', function () {
	$0
});
endsnippet

snippet des "describe"
describe('$1', function () {
	$0
});
endsnippet

snippet exp "expect"
const expected = $1;
const actual = $0;
expect(actual).to.eq(expected);
endsnippet

snippet d "debugger;"
debugger; // eslint-disable-line
endsnippet

snippet di "eslint-disable-line"
// eslint-disable-line
endsnippet

snippet me "module.exports"
module.exports = $0;
endsnippet

snippet exd "export default"
export default $0
endsnippet

snippet ex "export default"
export $0
endsnippet

snippet react_render "ReactDOM render component"
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));
endsnippet

snippet server_hot "Webpack React Hot Module Replacement"
var webpack = require('webpack');
var WebpackDevServer = require('webpack-dev-server');
var config = require('./webpack.config.js');

new WebpackDevServer(webpack(config), {
  publicPath: config.output.publicPath,
  hot: true,
  historyApiFallback: true,
  stats: { colors: true }
}).listen(3000, 'localhost', function (err, result) {
  if (err) {
    console.log(err);
  }

  console.log('Listening at localhost:3000');
});
endsnippet

snippet webpack "Webpack Babel Seed"
/*

npm install react react-dom --save

npm install babel-core babel-loader webpack webpack-dev-server react-hot-loader --save-dev

Add .babelrc, babelrc⇥ᐧ

Add to package.json:

  "scripts": {
   "start": "node server.js",
   "lint": "eslint app"
  },

Add server.js, server_hot⇥ᐧ

Add app/index.js, react_index⇥ᐧ

Add app/App.jsx, react_component_es6⇥ᐧ

Add <script src="/bundle.js"></script> to html

*/

var path = require('path');
var webpack = require('webpack');

module.exports = {
  devtool: 'eval',

  entry: [
    'webpack-dev-server/client?http://localhost:3000',
    'webpack/hot/only-dev-server',
    './app/index.js'
  ],

  output: {
    path: path.join(__dirname, 'dist'),
    filename: 'bundle.js',
    publicPath: '/'
  },

  plugins: [
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoErrorsPlugin()
  ],

  resolve: {
    extensions: ['', '.js', '.jsx']
  },

  module: {
    loaders: [{
      test: /\.j(s|sx)$/,
      include: path.join(__dirname, 'app'),
      loaders: ['react-hot', 'babel']
    }]
  }
};
endsnippet
