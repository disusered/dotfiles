snippet jdh "Javadoc header"
/**
 * `!p snip.rv = fn`
 *
 * @author ${1:Carlos Antonio}
 * @overview ${2:My cool project} 
 * @copyright Â© `date +"%Y"` ${3:Carlos Antonio}
 * @license ${4:GPLv2}
 */
endsnippet

snippet gpl "The GPL license"
/**
 * `!p snip.rv = fn`
 *
 * Copyright (C) `date +"%Y"` ${0:Carlos Antonio}
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 */

endsnippet

snippet if "A simple if condition"
if (${1:expression}) {
	$0
}
endsnippet

snippet ife "A simple if else condition"
if (${1:expression}) {
	$4
} else ${2:if (${3:bar}) }{
	$0
}
endsnippet

snippet sw "Switch condition"
switch (${1:expression}) {
	case ${2:alpha}:
		${5:console.log($2);}
		break;
	case ${3:beta}:
		${6:console.log($3);}
		break;${4:
	default:
		${7:console.log('default');}}
}
endsnippet

snippet f "Hoisted function"
function ${1:name}(${2:arg1}${3:, ${4:arg2}}){
	$0
}
endsnippet

snippet vf "Variable function"
var ${1:name} = function ${1:name}(${2:arg1}${3:, ${4:arg2}}){
	$0
}
endsnippet

snippet cl "Log to default console"
console.log('${0:Some useful message}');
endsnippet

snippet cd "Log to debug console"
console.debug('${0:Some debug message}');
endsnippet

snippet cw "Log to warning  console"
console.warn('${0:Some warning message}');
endsnippet

snippet ce "Log to error console"
console.error('${0:Some error message}');
endsnippet

snippet us "Use strict definition"
'use strict';
endsnippet

snippet r "Return"
return ${1:variable};
endsnippet

snippet ro "Return object"
return {
	${1:key}: ${2:value}
};
endsnippet

snippet ngc "Define a new Angular Controller. You can change the controller name and parameters."
var ${1:controllerName} = function(${2:scope}, ${3:injectables}) {
  $0
};
endsnippet

snippet ngfor "angular.foreach loop"
angular.forEach(${1:iterateOver}, function(value, key) {
  $0
});
endsnippet

snippet ngm "A new angular module without a config function."
angular.module('${1:moduleName}', [${2:moduleDependencies}]);
$0
endsnippet

snippet ngma "A new angular module without a config function and a variable assignment."
var ${1:moduleName} = angular.module('$1$', [${2:moduleDeps}]);
$0
endsnippet

snippet ngmc "A new angular module with a config function"
var ${1:moduleName} = angular.module('$1', [${2:moduleDeps}], function(${3:configDeps}) {
  $0
});
endsnippet

snippet ngmfa "A factory in a module"
factory('${1:factoryName}', function(${2:dependencies}) {
  $0
});
endsnippet

snippet ngms "Define an Angular Module Service to be attached to a previously defined module. You can change the service name and service injectables."
service('${1:serviceName}', function(${2:injectables}) {
  $0
});
endsnippet

snippet ngmfi "Define an Angular Module Filter to be attached to a previously defined module. You can change the filter name."
filter('${1:filterName}', function(${2:injectables}) {
  return function(input, ${3:args}) {
    $0
  };
})
endsnippet

# Scope Related Snippets
snippet $f "Define a new $scope'd function (usually inside an AngularJS Controller). You can change the function name and arguments."
$scope.${1:functionName} = function(${2:args}) {
  $0
};
endsnippet

snippet $v "Defines a new $scope'd variable inside an AngularJS controller."
$scope.${1:variable} = ${2:value};
$0
endsnippet

snippet $va "Defines a new $scope'd variable inside an AngularJS controller and assigns a value from a constructor arguments."
$scope.${1:variable} = ${2:variable};
$0
endsnippet

snippet $w "Define a $watch for an expression. You can change the expression to be watched."
$scope.$watch('${1:watchExpr}', function(newValue, oldValue) {
  $0
});
endsnippet

snippet $on "Define a $on for a $broadcast/$emit on the $scope inside an Angular Controller. You can change the event name to listen on."
$scope.$on('${1:eventName}', function(event, ${2:args}) {
  $0
});
endsnippet

snippet $b "Define a $broadcast for a $scope inside an Angular Controller / Angular Controller Function. You can change the event name and optional event arguments."
$scope.$broadcast('${1:eventName}', ${2:eventArgs});
$0
endsnippet

snippet $e "Define an $emit for a $scope inside an Angular Controller / Angular Controller Function. You can change the event name and optional event arguments."
$scope.$emit('${1:eventName}', ${2:eventArgs});
$0
endsnippet

# Directive related snippets
snippet ngdcf "A compile function"
function compile(tElement, tAttrs, transclude) {
  return function (scope, element, attrs) {
    $0
  }
}
endsnippet

snippet ngdlf "A linking function in a directive."
function (scope, element, attrs${1:ctrl}) {
  $0
}
endsnippet

snippet ngdc "A directive with a compile function"
directive('${1:directiveName}', function factory(${2:injectables}) {
  var directiveDefinitionObject = {
    ${3:directiveAttrs},
    compile: function compile(tElement, tAttrs, transclude) {
      return function (scope, element, attrs) {
        $0
      }
    }
  };
  return directiveDefinitionObject;
});
endsnippet

snippet ngdl "A directive with a linking function only."
.directive('${1:directiveName}', function(${2:directiveDeps}) {
  return function(scope, element, attrs${3:ctrl}) {
    $0
  }
});
endsnippet
