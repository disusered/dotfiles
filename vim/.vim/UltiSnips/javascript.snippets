snippet use "Use Strict" b
'use strict';
endsnippet

snippet if "A simple if condition" b
if (${1:expression}) {
  $0
}
endsnippet

snippet ife "A simple if else condition" b
if (${1:expression}) {
  $4
} else ${2:if (${3:bar}) }{
  $0
}
endsnippet

snippet sw "Switch condition" b
switch (${1:expression}) {
  case ${2:alpha}:
    ${5:console.log($2);}
    break;
  case ${3:beta}:
    ${6:console.log($3);}
    break;${4:
  default:
    ${7:console.log('default');}}
}
endsnippet

snippet => "Fat arrow" i
(${1}) => {$0}
endsnippet


snippet fd "Function declaration"
function ${1:name}(${2}) {
  $0
}
endsnippet

snippet _f "Inline Function declaration" i
function(${2}) {
  $0
}
endsnippet

snippet iife "Immediately Invoked Function Expression"
(function($1) {
  $0
})($2);
endsnippet

snippet =>i "Immediately Invoked Fat Arrow"
(($1) => {
  $0
})($2);
endsnippet

snippet fe "Function expression" b
var ${1:name} = function ${1:name}(${2}){
  $0
}
endsnippet

snippet cl "Log to default console"
console.log(${0}); // eslint-disable-line
endsnippet

snippet cd "Log to debug console"
console.debug(${0}); // eslint-disable-line
endsnippet

snippet cw "Log to warning  console"
console.warn(${0}); // eslint-disable-line
endsnippet

snippet ce "Log to error console"
console.error(${0}); // eslint-disable-line
endsnippet

snippet flow "Flow type checking" b
/* @flow */
endsnippet

snippet R "React"
React
endsnippet

snippet rpta "PropTypes.Array" i
PropTypes.array
endsnippet

snippet rptb "PropTypes.Boolean" i
PropTypes.bool
endsnippet

snippet rptf "PropTypes.Function" i
PropTypes.func
endsnippet

snippet rptn "PropTypes.number" i
PropTypes.number
endsnippet

snippet rptno "PropTypes.node" i
PropTypes.node
endsnippet

snippet rpto "PropTypes.object" i
PropTypes.object
endsnippet

snippet rpts "PropTypes.string" i
PropTypes.string
endsnippet

snippet rpte "PropTypes.element" i
PropTypes.element
endsnippet

snippet rpton "PropTypes.oneOf"
PropTypes.oneOf([$0])
endsnippet

snippet rptao "PropTypes.arrayOf"
PropTypes.arrayOf($0)
endsnippet

snippet rptoo "PropTypes.objectOf"
PropTypes.objectOf($0)
endsnippet

snippet rptsh "PropTypes.shape" i
PropTypes.shape({
  ${1:key}: $0
})
endsnippet

snippet react_component_stateless "React Component (Stateless)"
import * as React from "react";
import PropTypes from "prop-types";

const ${1:`!p snip.rv = snip.basename`} = ({ ${2:children} }) => ${5:<div>{${0:`!p snip.rv = t[2]`}}</div>}${3:

`!p snip.rv = t[1]`.propTypes = {
	`!p snip.rv = t[2]`: ${4:PropTypes.node} };
}

export default `!p snip.rv = snip.basename`;
endsnippet

snippet react_component_function "React Component (Stateless)"
import * as React from "react";

function ${1:`!p snip.rv = snip.basename`}(${3:{ ${2:children} }}) {
	return ${5:(
		${0:<div>{`!p snip.rv = t[2]`}</div>}
	)}
}

export default `!p snip.rv = snip.basename`;
endsnippet

snippet react_component_es5 "React Component (ES5)" i
var React = require('react');

var ${1:`!p snip.rv = snip.basename`} = React.createClass({
  render: function() {
    return (<div>`!p snip.rv = t[1]`</div>);
  }
});

module.exports = `!p snip.rv = t[1]`;
endsnippet

snippet react_component_es6 "React Component (ES6)" i
import React, { Component } from 'react';

export default class ${1:`!p snip.rv = snip.basename`} extends Component {
  render() {
    return (
      <div>`!p snip.rv = t[1]`</div>
    );
  }
}
endsnippet

snippet tp "this.props"
this.props.$0
endsnippet

snippet tpc "this.props.children"
{this.props.children}$0
endsnippet

snippet ts "this.state"
this.state.$0
endsnippet

snippet .ir ".isRequired" i
.isRequired
endsnippet

snippet regex "New RegEx"
var ${1:re} = new RegExp($0, '${2:i}');
endsnippet

snippet re "Return"
return ${1:variable};
endsnippet

snippet ro "Return object"
return {
  ${1:key}: ${2:value}
};
endsnippet

snippet @ "this" i
this
endsnippet

snippet r "require()"
require('$0');
endsnippet

snippet im "import"
import { $0 } from '$1';
endsnippet

snippet imd "import default"
import $0 from '$1';
endsnippet

snippet imr "import React"
import * as React from 'react';$0
endsnippet

snippet imt "import type"
import type { $0 } from '$1';
endsnippet

snippet v "var"
var ${1:name} = $0
endsnippet

snippet c "const"
const ${1:name} = $0
endsnippet

snippet c} "const with destructuring"
const { ${1:name} } = $0
endsnippet

snippet u "undefined"
undefined$0
endsnippet

snippet it "it should..."
it('${1:should...}', () => {
  $0
});
endsnippet

snippet des "describe"
describe('$1', () => {
  $0
});
endsnippet

snippet exp "expect"
const actual = $1;
const expected = $0;
expect(actual).toBe(expected);
endsnippet

snippet ava "AVA" b
import test from 'ava';
import $1 from '$2';

test('${3:title}', t => {
  t.is($1(), '$4');
});
$0
endsnippet

snippet test " Test" b
test('${1:title}', () => {
  $2
});
$0
endsnippet

snippet d "debugger;"
debugger; // eslint-disable-line jshint ignore:line
endsnippet

snippet esd "eslint-disable"
/* eslint-disable ${0:rule }*/
endsnippet

snippet me "module.exports"
module.exports = $0;
endsnippet

snippet ex "export"
export $0
endsnippet

snippet exd "export default"
export default $0
endsnippet

snippet react_render "ReactDOM render component"
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));
endsnippet

snippet ss "Sequelize string type"
{ type: Sequelize.STRING }
endsnippet

snippet sb "Sequelize boolean type"
{ type: Sequelize.BOOLEAN }
endsnippet

snippet sd "Sequelize date type"
{ type: Sequelize.DATE }
endsnippet

snippet si "Sequelize integer type"
{ type: Sequelize.INTEGER }
endsnippet

snippet sj "Sequelize json type"
{ type: Sequelize.JSON }
endsnippet

snippet sds "Sequelize string data type"
{ type: Sequelize.DataTypeString }
endsnippet

snippet sdb "Sequelize boolean data type"
{ type: Sequelize.DataTypeBoolean }
endsnippet

snippet sdd "Sequelize date data type"
{ type: Sequelize.DataTypeDate }
endsnippet

snippet sdi "Sequelize integer data type"
{ type: Sequelize.DataTypeInteger }
endsnippet

snippet sdj "Sequelize json type"
{ type: Sequelize.DataTypeJSONType }
endsnippet

snippet jd "JSDoc single-line comment"
/** ${0:A comment explaining stuff} */
endsnippet

snippet jdm "JSDoc multi-line comment"
/**
 * ${0:Represents a book.}${1:
 * @param {string} title - The title of the book.}${2:
 * @returns {number}}
 */
endsnippet

snippet jdp "JSDoc param"
* @param {${0:string}} ${1:title} - ${2: The title of the book}
endsnippet

snippet jdr "JSDoc return comment"
* ${0:@returns {number}}
endsnippet

snippet jdt "JSDoc type comment"
* ${0:@type {number}}
endsnippet

snippet jdtd "JSDoc typedef comment"
/**
 * ${1:A song}
 * @typedef {${2:Object}} ${3:Song}
 * @property {${4:string}} ${5:title} - ${0:The title}
 */
endsnippet

snippet jdtp "JSDoc property"
* @property {${0:string}} ${1:title} - ${2: The title}
endsnippet

snippet jdh "JSDoc file header comment" b
/**
 * `!p snip.rv = fn`
 *
 * @author ${1:Carlos Antonio}
 * @overview ${2:My cool project}
 * @copyright Â© `date +"%Y"` ${3:Carlos Antonio}
 * @license ${4:GPLv2}
 */
endsnippet
